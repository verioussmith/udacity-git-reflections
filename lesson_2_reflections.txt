What happens when you initialize a repository? 

	• When I initialize a repository - git creates an invisible .git directory with several files in it to begin tracking the new repository.

Why do you need to do it?

	• I need to initiailize a repository so that I can begin to track this particular project with git

How is the staging area different from the working directory and the repository?

	• The staging area is a temporary area that allows you to modify files and change them

What value do you think it offers?

	• The staging area gives you the ability to track what is happening to files without actually commiting the files

How can you use the staging area to make sure you have one commit per logical
change?
	
	• I can use git status to check the status of the files in the staging area after I have made the changes.  I can then make a commit of the changes that appear in the staging area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	
	• Situations in which git branches would be helpful: Testing new feautures, Creating alternate versions of current software, experiementing with random code 
	• Branches will allow me to modify or add to the code base without disrupting the entire project if the modifications don't work as expected

How do the diagrams help you visualize the branch structure?
	
	• Diagrams help me to seee the entire history of commits on a branch structure, They help me to see which areas of a branch are accessible and what is avaialabel for me to checkout.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	• The result of merging two branches to gether is that now I have the functionality of the coins branch now added within my master branch.  We represent it in the diagram as a branch to show how and where it is accessible.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	• Git's automatic merging will attempt to intelligently merge two pieces of code into one.  The downside of the automatic merge is that git will sometimes see a conflict that needs to be manually resolved.

